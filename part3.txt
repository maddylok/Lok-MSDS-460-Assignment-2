## Part 2: Model Specification & Part 3: Programming

from pulp import LpMinimize, LpProblem, LpVariable

# LP Problem
lp_model = LpProblem("Project_Scheduling_Optimization", LpMinimize)

# decision variables
task_vars = {task: LpVariable(f"T_{task}", lowBound=0) for task in df_tasks["taskID"]}

# constraint: total project time
T_end = LpVariable("T_end", lowBound=0)

# objective function: minimize total duration of development time
lp_model += T_end

# constraint: dependency constraint
for _, row in df_tasks.iterrows():
    task = row["taskID"]
    duration = row["expectedHours"]

    if pd.notna(row["predecessorTaskIDs"]): 
        predecessors = str(row["predecessorTaskIDs"]).split(",")
        for pred in predecessors:
            pred = pred.strip()
            if pred in task_vars: 
                lp_model += task_vars[pred] + duration <= task_vars[task]

for task, var in task_vars.items():
    duration = df_tasks.loc[df_tasks["taskID"] == task, "expectedHours"].values[0]
    lp_model += var + duration <= T_end

# solving problem
from pulp import PULP_CBC_CMD
lp_model.solve(PULP_CBC_CMD(msg=False))

print("Project Scheduling Optimization Results:")
print(f"Minimum Project Completion Time: {T_end.varValue} hours\n")

print("Task Start Times:")
for task, var in task_vars.items():
    print(f"{task}: Start at {var.varValue} hours")
    
    # task start and end times
task_end_times = {task: var.varValue + df_tasks.loc[df_tasks["taskID"] == task, "expectedHours"].values[0] for task, var in task_vars.items()}
task_start_times = {task: task_vars[task].varValue for task in task_vars}

# another debugging code i got from chatgpt to try to fix my critical path code
h_slack = task_vars["H"].varValue - max(task_end_times["F"], task_end_times["G"])
print(f"\nDEBUG: Task H Slack = {h_slack} hours")

lp_model += task_vars["H"] == task_end_times["F"]

critical_path = set()

def trace_full_critical_path(task):
    """Recursively add tasks to the critical path by following dependencies back to the beginning."""
    if task in critical_path:
        return 

    critical_path.add(task)

    predecessors = df_tasks.loc[df_tasks["taskID"] == task, "predecessorTaskIDs"].values[0]
    if pd.notna(predecessors):
        for pred in str(predecessors).split(","):
            pred = pred.strip()
            if pred in task_end_times:
                trace_full_critical_path(pred)  

for task, end_time in task_end_times.items():
    if abs(end_time - T_end.varValue) <= 2:
        trace_full_critical_path(task)

critical_path = sorted(set(critical_path), key=lambda x: task_vars[x].varValue)

print("\nCritical Path Tasks:")
print(" â†’ ".join(critical_path))


lp_model